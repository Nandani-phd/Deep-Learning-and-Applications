# -*- coding: utf-8 -*-
"""2Layer_RNN_LSTM_handwritten.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ok5U3rKm-v0aLHtBO06a5R5bYtUWlRmM

#Preprocessing Data
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import tensorflow.keras as keras
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import pandas as pd
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from tensorflow.keras.optimizers import Adam, SGD, Adagrad, RMSprop
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard
import pickle as p
import glob
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Input, Masking

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import os
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, SimpleRNN, Masking, Input, Activation
from tensorflow.keras.activations import softmax
import tensorflow as tf

path = "/content/drive/MyDrive/Handwriting_Data01"
os.listdir(path)

def read_data(path):
    tr_path = path+'/train/'
    test_path = path+'/dev/'
    train = pd.concat([pd.read_csv(tr_path+i, sep=" ", header=None) for i in os.listdir(tr_path)])
    test = pd.concat([pd.read_csv(test_path+i, sep=" ", header=None) for i in os.listdir(test_path)])
    return train, test

tr_ai, test_ai= read_data(path+'/ai')
tr_bA, test_bA= read_data(path+'/bA')
tr_chA, test_chA= read_data(path+'/chA')
tr_dA, test_dA= read_data(path+'/dA')
tr_tA, test_tA= read_data(path+'/tA')

tr_bA

tr_chA.drop(0, inplace=True, axis=1)
tr_dA.drop(0, inplace=True, axis=1)
tr_ai.drop(0, inplace=True, axis=1)
tr_bA.drop(0, inplace=True, axis=1)
tr_tA.drop(0, inplace=True, axis=1)

test_chA.drop(0, inplace=True, axis=1)
test_dA.drop(0, inplace=True, axis=1)
test_ai.drop(0, inplace=True, axis=1)
test_bA.drop(0, inplace=True, axis=1)
test_tA.drop(0, inplace=True, axis=1)

tr_ai=tr_ai.dropna(axis=1,how='all')
test_ai=test_ai.dropna(axis=1,how='all')
tr_bA=tr_bA.dropna(axis=1,how='all')
test_bA=test_bA.dropna(axis=1,how='all')
tr_chA=tr_chA.dropna(axis=1,how='all')
test_chA=test_chA.dropna(axis=1,how='all')
tr_dA=tr_dA.dropna(axis=1,how='all')
test_dA=test_dA.dropna(axis=1,how='all')
tr_tA=tr_tA.dropna(axis=1,how='all')
test_tA=test_tA.dropna(axis=1,how='all')

#import pandas as pd
tr_data = pd.concat([tr_chA, tr_tA, tr_ai, tr_bA, tr_dA])
test_data = pd.concat([test_chA, test_tA, test_ai, test_bA, test_dA])
# save to training.csv file
#tr_data.to_csv('training.csv', index=False)

nan_list=[np.nan]*test_data.shape[0]
nan_list

for i in range(test_data.shape[1],tr_data.shape[1]+1):
    test_data[i]=nan_list

tr_data=tr_data.replace(np.nan,0)
test_data=test_data.replace(np.nan,0)

"""tr_ai=tr_ai.replace(np.nan,0)
test_ai=test_ai.replace(np.nan,0)
tr_bA=tr_bA.replace(np.nan,0)
test_bA=test_bA.replace(np.nan,0)
tr_chA=tr_chA.replace(np.nan,0)
test_chA=test_chA.replace(np.nan,0)
tr_dA=tr_dA.replace(np.nan,0)
test_dA=test_dA.replace(np.nan,0)
tr_tA=tr_tA.replace(np.nan,0) 
test_tA=test_tA.replace(np.nan,0)
"""

df =tr_data
# Create an empty list to store the x, y point pairs
tr = []


# Loop over each row in the DataFrame
for index, row in df.iterrows():
    # Create a list to store the x, y pairs for this row
    point_row = []
    
    
    # Loop over each value in the row, skipping the first column
    for i in range(1, len(row), 2):
        # Get the x, y pair for this point
        x = row[i]
        y = row[i+1]
        l=[]
        #print(type(x))
        l.append(x)
        l.append(y)
        l=np.array(l,dtype=np.float32)
        # Add the x, y pair to the list for this row
        point_row.append(l)
    
    # Add the list of x, y pairs for this row to the points list
    tr.append(point_row)

# Create a new DataFrame from the points list
train = pd.DataFrame(tr)

# Save the new DataFrame to a CSV file
#df_points.to_csv('testHw.csv', index=False, header=False)

df =test_data
# Create an empty list to store the x, y point pairs
tst = []


# Loop over each row in the DataFrame
for index, row in df.iterrows():
    # Create a list to store the x, y pairs for this row
    point_row = []
    
    
    # Loop over each value in the row, skipping the first column
    for i in range(1, len(row), 2):
        # Get the x, y pair for this point
        x = row[i]
        y = row[i+1]
        l=[]
        #print(type(x))
        l.append(x)
        l.append(y)
        l=np.array(l,dtype=np.float32)
        # Add the x, y pair to the list for this row
        point_row.append(l)
    
    # Add the list of x, y pairs for this row to the points list
    tst.append(point_row)

# Create a new DataFrame from the points list
test = pd.DataFrame(tst)

# Save the new DataFrame to a CSV file
#df_points.to_csv('testHw.csv', index=False, header=False)

"""import pandas as pd
label = []
for i in range(len(test_ai)):
    label.append('ai')
for i in range(len(test_bA)):
    label.append('bA')
for i in range(len(test_chA)):
    label.append('chA')
for i in range(len(test_dA)):
    label.append('dA')
for i in range(len(test_tA)):
    label.append('tA')

label_df = pd.DataFrame({'label': label})
label_df['label_index'] = label_df['label'].replace({'ai': 0, 'bA': 1, 'chA': 2, 'dA': 3, 'tA': 4})
label_df.to_csv('/content/drive/MyDrive/Test_label1.csv', index=False)
"""

# Load the CSV file into a pandas DataFrame
trainLabel = pd.read_csv('/content/drive/MyDrive/label1 (1).csv')

# Drop a specific label (column)
trainLabel = trainLabel.drop('label', axis=1)


# Save the modified DataFrame back to a new CSV file
#trainLabel.to_csv('/content/drive/MyDrive/modified_file_train.csv', index=False)

# Load the CSV file into a pandas DataFrame
Test_label = pd.read_csv('/content/drive/MyDrive/Test_label1.csv')

# Drop a specific label (column)
Test_label = Test_label.drop('label', axis=1)

yt=trainLabel.values
ytest=Test_label.values

tensortest=tf.convert_to_tensor(tst)

tensortrain=tf.convert_to_tensor(tr)

from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard

es1= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model1 = Sequential()
model1.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model1.add(SimpleRNN(units=64,return_sequences=True))
model1.add(Dropout(0.2))
#model.add(SimpleRNN(units=64,return_sequences=True))
#model.add(Dropout(0.2))
model1.add(SimpleRNN(units=64))
model1.add(Dense(units=5, activation='softmax'))
model1.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model1.summary()
history1=model1.fit(tensortrain, yt, callbacks=[es1],epochs=1000, batch_size=128)

model1.save('/content/drive/MyDrive/model11.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc1=model1.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model1.metrics_names)
print(trainAcc1)
print('\nEvaluation of model on test data:')
testAcc1=model1.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model1.metrics_names)
print(testAcc1)
print('\nPredictions for test data:')
testProb1=model1.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred1=np.argmax(testProb1,axis=1)
confusionMatrix1=tf.math.confusion_matrix(ytest,pred1)
print(confusionMatrix1)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history1.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()

es2= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model2 = Sequential()
model2.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model2.add(SimpleRNN(units=32,return_sequences=True))
model2.add(Dropout(0.2))
#model.add(SimpleRNN(units=64,return_sequences=True))
#model.add(Dropout(0.2))
model2.add(SimpleRNN(units=32))
model2.add(Dense(units=5, activation='softmax'))
model2.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model2.summary()
history2=model2.fit(tensortrain, yt, callbacks=[es2],epochs=1000, batch_size=128)

model2.save('/content/drive/MyDrive/model2.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc2=model2.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model2.metrics_names)
print(trainAcc2)
print('\nEvaluation of model on test data:')
testAcc2=model2.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model2.metrics_names)
print(testAcc2)
print('\nPredictions for test data:')
testProb2=model2.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred2=np.argmax(testProb2,axis=1)
confusionMatrix2=tf.math.confusion_matrix(ytest,pred2)
print(confusionMatrix2)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history2.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()

es3= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model3 = Sequential()
model3.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model3.add(SimpleRNN(units=128,return_sequences=True))
model3.add(Dropout(0.2))
#model.add(SimpleRNN(units=64,return_sequences=True))
#model.add(Dropout(0.2))
model3.add(SimpleRNN(units=128))
model3.add(Dense(units=5, activation='softmax'))
model3.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model3.summary()
history3=model3.fit(tensortrain, yt, callbacks=[es3],epochs=1000, batch_size=128)

model3.save('/content/drive/MyDrive/model3.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc3=model3.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model3.metrics_names)
print(trainAcc3)
print('\nEvaluation of model on test data:')
testAcc3=model3.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model3.metrics_names)
print(testAcc3)
print('\nPredictions for test data:')
testProb3=model3.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred3=np.argmax(testProb3,axis=1)
confusionMatrix3=tf.math.confusion_matrix(ytest,pred3)
print(confusionMatrix3)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history3.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()

mask_value=0.0
model31 = Sequential()
model31.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model31.add(SimpleRNN(units=128,return_sequences=True))
#model31.add(Dropout(0.2))
#model.add(SimpleRNN(units=64,return_sequences=True))
#model.add(Dropout(0.2))
model31.add(SimpleRNN(units=128))
model31.add(Dense(units=5, activation='softmax'))
model31.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model31.summary()
history31=model31.fit(tensortrain, yt, callbacks=[es3],epochs=1000, batch_size=128)

model31.save('/content/drive/MyDrive/model31.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc31=model31.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model31.metrics_names)
print(trainAcc31)
print('\nEvaluation of model on test data:')
testAcc31=model31.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model31.metrics_names)
print(testAcc31)
print('\nPredictions for test data:')
testProb31=model31.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred31=np.argmax(testProb31,axis=1)
confusionMatrix31=tf.math.confusion_matrix(ytest,pred31)
print(confusionMatrix31)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history31.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()

es6= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model6 = Sequential()
model6.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model6.add(LSTM(units=32,return_sequences=True))
model6.add(Dropout(0.2))
#model.add(LSTM(units=32,return_sequences=True))
#model.add(Dropout(0.2))
model6.add(LSTM(units=32))
#model.add(Dropout(0.2))
model6.add(Dense(units=5, activation='softmax'))
model6.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model6.summary()
history6=model6.fit(tensortrain, yt, callbacks=[es6],epochs=1000, batch_size=128)

model6.save('/content/drive/MyDrive/model6.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc6=model6.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model6.metrics_names)
print(trainAcc6)
print('\nEvaluation of model on test data:')
testAcc6=model6.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model6.metrics_names)
print(testAcc6)
print('\nPredictions for test data:')
testProb6=model6.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred6=np.argmax(testProb6,axis=1)
confusionMatrix6=tf.math.confusion_matrix(ytest,pred6)
print(confusionMatrix6)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history6.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()

es7= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)



mask_value=0.0
model7 = Sequential()
model7.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model7.add(LSTM(units=64,return_sequences=True))
model7.add(Dropout(0.2))
#model.add(LSTM(units=32,return_sequences=True))
#model.add(Dropout(0.2))
model7.add(LSTM(units=64))
#model.add(Dropout(0.2))
model7.add(Dense(units=5, activation='softmax'))
model7.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model7.summary()
history7=model7.fit(tensortrain, yt, callbacks=[es6],epochs=1000, batch_size=128)

model7.save('/content/drive/MyDrive/model7.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc7=model7.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model7.metrics_names)
print(trainAcc7)
print('\nEvaluation of model on test data:')
testAcc7=model7.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model7.metrics_names)
print(testAcc7)
print('\nPredictions for test data:')
testProb7=model7.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred7=np.argmax(testProb7,axis=1)
confusionMatrix7=tf.math.confusion_matrix(ytest,pred7)
print(confusionMatrix7)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history7.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()



es8= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model8 = Sequential()
model8.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model8.add(LSTM(units=128,return_sequences=True))
model8.add(Dropout(0.2))
#model.add(LSTM(units=32,return_sequences=True))
#model.add(Dropout(0.2))
model8.add(LSTM(units=128))
#model.add(Dropout(0.2))
model8.add(Dense(units=5, activation='softmax'))
model8.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model8.summary()
history8=model8.fit(tensortrain, yt, callbacks=[es8],epochs=1000, batch_size=128)

model8.save('/content/drive/MyDrive/model8.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc8=model8.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model8.metrics_names)
print(trainAcc8)
print('\nEvaluation of model on test data:')
testAcc8=model8.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model8.metrics_names)
print(testAcc8)
print('\nPredictions for test data:')
testProb8=model8.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred8=np.argmax(testProb8,axis=1)
confusionMatrix8=tf.math.confusion_matrix(ytest,pred8)
print(confusionMatrix8)

plt.figure(figsize=(8, 6))
#plt.plot(history8.history['accuracy'])
plt.plot(history8.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper left')
plt.show()

es9= EarlyStopping(monitor='loss',min_delta=0.0001, patience=35,verbose=1)
model9 = Sequential()
model9.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model9.add(LSTM(units=64,dropout=0.2))
model9.add(Dense(units=5, activation='softmax'))
model9.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model9.summary()
history9=model9.fit(tensortrain, yt, epochs=1000,callbacks=[es1], batch_size=128)

model9.save('/content/drive/MyDrive/model9.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc9=model9.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model9.metrics_names)
print(trainAcc9)
print('\nEvaluation of model on test data:')
testAcc9=model9.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model9.metrics_names)
print(testAcc9)
print('\nPredictions for test data:')
testProb9=model9.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred9=np.argmax(testProb9,axis=1)
confusionMatrix9=tf.math.confusion_matrix(ytest,pred9)
print(confusionMatrix9)

mask_value=0.0
model = Sequential()
model.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model.add(LSTM(units=64,return_sequences=True))
model.add(Dropout(0.2))
#model.add(LSTM(units=32,return_sequences=True))
#model.add(Dropout(0.2))
model.add(LSTM(units=64))
#model.add(Dropout(0.2))
model.add(Dense(units=5, activation='softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model.summary()
history=model.fit(tensortrain, yt, callbacks=[es6],epochs=1000, batch_size=128)

model.save('/content/drive/MyDrive/model6.h5')

es7= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model = Sequential()
model.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model.add(LSTM(units=128,return_sequences=True))
model.add(Dropout(0.2))
#model.add(LSTM(units=32,return_sequences=True))
#model.add(Dropout(0.2))
model.add(LSTM(units=128))
#model.add(Dropout(0.2))
model.add(Dense(units=5, activation='softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model.summary()
history=model.fit(tensortrain, yt, callbacks=[es7],epochs=1000, batch_size=128)

model.save('/content/drive/MyDrive/model7.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc=model.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model.metrics_names)
print(trainAcc)
print('\nEvaluation of model on test data:')
testAcc=model.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model.metrics_names)
print(testAcc)
print('\nPredictions for test data:')
testProb=model.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred=np.argmax(testProb,axis=1)
confusionMatrix=tf.math.confusion_matrix(ytest,pred)
print(confusionMatrix)



from tensorflow import keras
# Load the model from the .h5 file
model7 = keras.models.load_model('/content/drive/MyDrive/model7.h5')

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc=model7.evaluate(x=tensortrain,y=yt,batch_size=1, verbose="auto",callbacks=None)
print(model7.metrics_names)
print(trainAcc)
print('\nEvaluation of model on test data:')
testAcc=model7.evaluate(x=tensortest, y=ytest, batch_size=1, verbose="auto",callbacks=None)
print(model7.metrics_names)
print(testAcc)
print('\nPredictions for test data:')
testProb=model7.predict(tensortest, batch_size=1, verbose="auto", callbacks=None)
pred=np.argmax(testProb,axis=1)
confusionMatrix=tf.math.confusion_matrix(ytest,pred)
print(confusionMatrix)

#Evaluating the model
print('\nEvaluation of model on train data:')
trainAcc=model.evaluate(x=tensortrain,y=yt,batch_size=128, verbose="auto",callbacks=None)
print(model.metrics_names)
print(trainAcc)

es1= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model = Sequential()
model.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model.add(SimpleRNN(units=64,return_sequences=True))
#model.add(SimpleRNN(units=32,return_sequences=True))
model.add(SimpleRNN(units=64))
model.add(Dense(units=5, activation='softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model.summary()
history=model.fit(tensortrain, yt, callbacks=[es1],epochs=200, batch_size=128)

model.save('/content/drive/MyDrive/model2.h5')

es2= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

mask_value=0.0
model = Sequential()
model.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model.add(SimpleRNN(units=128,return_sequences=True))
#model.add(SimpleRNN(units=32,return_sequences=True))
model.add(SimpleRNN(units=128))
model.add(Dense(units=5, activation='softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model.summary()
history=model.fit(tensortrain, yt, callbacks=[es2],epochs=200, batch_size=128)

model.save('/content/drive/MyDrive/model3.h5')

es2= EarlyStopping(monitor='loss',min_delta=0.0001, patience=20,verbose=1)

model.evaluate(tensortrain,yt)

model.evaluate(tensortest,yTest)


# Extract the loss values from the history object
training_loss = history.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

mask_value=0.0
model = Sequential()
model.add(Masking(mask_value=mask_value, input_shape=(161, 2)))
model.add(LSTM(units=32,return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=32,return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=32))
model.add(Dropout(0.2))
model.add(Dense(units=5, activation='softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
model.summary()
history=model.fit(tensortrain, yt, epochs=1000, batch_size=128)

#model evaluation
model.evaluate(tensortrain,yt)

model.evaluate(tensortest,yTest)


# Extract the loss values from the history object
training_loss = history.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

es= EarlyStopping(monitor='loss',min_delta=0.0001, patience=3,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(161))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW1.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW1.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

es= EarlyStopping(monitor='loss',min_delta=0.0001, patience=3,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW2.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW2.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

es= EarlyStopping(monitor='loss',min_delta=0.001, patience=3,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  activation='relu',return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW8.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW8.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161, activation='relu', return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128, verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161, activation='relu', return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=1500,batch_size=128, verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(161, activation='relu', return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=32,callbacks=[es], verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(256,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(256, activation='relu', return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(256,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=5000,batch_size=128, verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161, activation='relu', return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=32,callbacks=[es], verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161, activation='relu', return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=161,callbacks=[es], verbose=1)

es= EarlyStopping(monitor='loss',min_delta=0.0001, patience=5,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161, activation='relu', return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=64,callbacks=[es], verbose=1)

es= EarlyStopping(monitor='loss',min_delta=0.001, patience=3,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW3.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW3.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

es= EarlyStopping(monitor='loss',min_delta=0.001, patience=3,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW7.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW7.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

es= EarlyStopping(monitor='loss',min_delta=0.0001, patience=5,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,activation='relu',input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=64,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW4.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW4.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

es= EarlyStopping(monitor='loss',min_delta=0.0001, patience=5,verbose=1)
model01 = Sequential()
model01.add(SimpleRNN(161,input_shape=(161, 2), return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161,  return_sequences=True))
#model01.add(Dropout(0.2))
model01.add(SimpleRNN(161))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=64,callbacks=[es], verbose=1)



#Save Model and Model Structure
model01.save('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW6.h5')
f=open('/content/drive/MyDrive/DLA6/hw_Save_Model/RNN_HW6.pckl','wb')
p.dump(history01.history,f)
f.close()

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
plt.show()

model01 = Sequential()
model01.add(SimpleRNN(1024,activation='relu',input_shape=(161, 2)))
model01.add(Dropout(0.2))
#model01.add(SimpleRNN(100))
#model01.add(LSTM(200))


#model3.add(LSTM(100, batch_input_shape=(64,32, 1),stateful=True))
#model3.add(LSTM(100,return_sequences=True))
#model3.add(LSTM(100,batch_input_shape=(64,32, 1),return_sequences=True,stateful=True))
#model3.add(LSTM(100))
#model3.add(Dropout(0.3))
#mode3.add(Dense(7,activation='softmax')) #7 class classification 
#model01.add(Dense(100,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])

history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)

# Extract the loss values from the history object
training_loss = history01.history['loss']

# Plot the training loss against epochs
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Average Training Error')
plt.xlabel('Epochs')
plt.ylabel('Average Training Error')
plt.title('Average Training Error vs. Epochs')
plt.legend()
#plt.savefig("E:/Nandani_D22180/DeepLearning/CV_DATA/save_model/RNN_CV1LEE.png")
plt.show()

model01 = Sequential()
model01.add(SimpleRNN(1024,activation='relu',input_shape=(161, 2), return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(100))
#model01.add(LSTM(200))


#model3.add(LSTM(100, batch_input_shape=(64,32, 1),stateful=True))
#model3.add(LSTM(100,return_sequences=True))
#model3.add(LSTM(100,batch_input_shape=(64,32, 1),return_sequences=True,stateful=True))
#model3.add(LSTM(100))
#model3.add(Dropout(0.3))
#mode3.add(Dense(7,activation='softmax')) #7 class classification 
#model01.add(Dense(100,activation='relu'))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(1024,activation='relu',input_shape=(161, 2), return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(100,  return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(100))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)

model01 = Sequential()
model01.add(SimpleRNN(1024,activation='relu',input_shape=(161, 2), return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(100,  return_sequences=True))
model01.add(Dropout(0.2))
model01.add(SimpleRNN(100))
model01.add(Dense(5,activation='softmax'))
model01.summary()

model01.compile(loss='sparse_categorical_crossentropy', optimizer='Adam', metrics = ['accuracy'])
history01=model01.fit(tensortrain, yt, epochs=500,batch_size=128,callbacks=[es], verbose=1)